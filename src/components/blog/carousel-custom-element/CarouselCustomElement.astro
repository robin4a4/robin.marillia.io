---
export interface Props {
  range?: "cover" | "contain";
}
const { range } = Astro.props;
---

<custom-carousel-component-example data-range={range}
  ><slot /></custom-carousel-component-example
>
<script>
  import "https://flackr.github.io/scroll-timeline/dist/scroll-timeline.js";

  class CarouselComponent extends HTMLElement {
    keyframes = [
      {
        borderColor: "#e2e8f0",
      },
      {
        borderColor: "#f472b6",
      },
      {
        borderColor: "#e2e8f0",
      },
    ];

    connectedCallback() {
      const slidesContainer = this.querySelector(
        "[data-slides-container]"
      ) as HTMLDivElement;

      const thumnailsContainer = this.querySelector(
        "[data-thumnails-container]"
      ) as HTMLDivElement;

      [...thumnailsContainer.children].forEach((dot, index) => {
        const correspondingSlide = slidesContainer.children[index];
        const button = dot.querySelector("button") as HTMLButtonElement;

        this.animateOnScroll(button, correspondingSlide);

        this.scrollOnThumbnailClick(button, correspondingSlide);
      });
      this.scrollOnControlClick(slidesContainer);
    }

    animateOnScroll(button, correspondingSlide) {
      const range = this.dataset.range;
      button.animate(this.keyframes, {
        fill: "both",
        // @ts-ignore
        timeline: new ViewTimeline({
          subject: correspondingSlide,
          axis: "inline",
        }),
        rangeStart: range === "contain" ? "contain 0%" : "cover",
        rangeEnd: range === "contain" ? "contain 100%" : "cover",
      });
    }

    scrollOnThumbnailClick(button, correspondingSlide) {
      button.addEventListener("click", () => {
        correspondingSlide.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "start",
        });
      });
    }

    scrollOnControlClick(slidesContainer) {
      const prevControl = this.querySelector(
        "[data-control='prev']"
      ) as HTMLButtonElement;
      const nextControl = this.querySelector(
        "[data-control='next']"
      ) as HTMLButtonElement;

      prevControl.addEventListener("click", () => {
        slidesContainer.scroll(-1, 0);
      });

      nextControl.addEventListener("click", () => {
        console.log("next");
        slidesContainer.scroll(1, 0);
      });
    }
  }
  if (customElements.get("custom-carousel-component-example") === undefined)
    customElements.define(
      "custom-carousel-component-example",
      CarouselComponent
    );
</script>
